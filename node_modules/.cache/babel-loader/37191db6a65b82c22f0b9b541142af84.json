{"ast":null,"code":"import _defineProperty from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/login/Login.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 0.2);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 375px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar Login =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Login, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function Login() {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this));\n    _this.state = {\n      username: null,\n      password: null\n    };\n    return _this;\n  }\n  /**\n   * HTTP POST request is sent to the backend.\n   * If the request is successful, a new user is returned to the front-end and its token is stored in the localStorage.\n   */\n\n\n  _createClass(Login, [{\n    key: \"login\",\n    value: function login() {\n      var _this2 = this;\n\n      fetch(\"\".concat(getDomain(), \"/users\"), {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (returnedUser) {\n        var user = new User(returnedUser); // store the token into the local storage\n\n        localStorage.setItem(\"token\", user.token); // user login successfully worked --> navigate to the route /game in the GameRouter\n\n        _this2.props.history.push(\"/game\");\n      }).catch(function (err) {\n        if (err.message.match(/Failed to fetch/)) {\n          alert(\"The server cannot be reached. Did you start it?\");\n        } else if (err.message.match(/wrong password/)) {\n          //wrong password, do as soon as you know how to\n          alert('wrong password');\n\n          _this2.props.history.push('/login');\n        } else {\n          alert(\"Something went wrong during the login: \".concat(err.message));\n        }\n      });\n    }\n    /**\n     * Testfunction i wrote to play arround with GET\n     */\n\n  }, {\n    key: \"login_test\",\n    value: function login_test() {\n      var _this3 = this;\n\n      alert('${getDomain()}/login');\n      fetch(\"\".concat(getDomain(), \"/login?d\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: 'd'\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (returnedUser) {\n        alert(returnedUser.name);\n\n        _this3.props.history.push(\"/game\");\n      }).catch(function (err) {\n        if (err.message.match(/Failed to fetch/)) {\n          alert(\"The server cannot be reached. Did you start it?\");\n        } else {\n          alert(\"Something went wrong during the login: \".concat(err.message));\n        }\n      });\n    }\n    /**\n     * function that leads to the registration-page, I made myself *\n     */\n\n  }, {\n    key: \"registration\",\n    value: function registration() {\n      this.props.history.push(\"/registration\");\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Username\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this4.handleInputChange(\"username\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Password\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this4.handleInputChange(\"password\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: !this.state.username || !this.state.password,\n        width: \"50%\",\n        onClick: function onClick() {\n          //this.login();\n          _this4.login_test();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Login\"), React.createElement(Button, {\n        width: \"50%\",\n        onClick: function onClick() {\n          _this4.registration();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Registration\")))));\n    }\n  }]);\n\n  return Login;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(Login);","map":{"version":3,"sources":["/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/login/Login.js"],"names":["React","styled","BaseContainer","getDomain","User","withRouter","Button","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Login","state","username","password","fetch","method","headers","then","response","json","returnedUser","user","localStorage","setItem","token","props","history","push","catch","err","message","match","alert","body","JSON","stringify","name","key","value","setState","e","handleInputChange","target","login_test","registration","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 375px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.2);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass Login extends React.Component {\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  constructor() {\n    super();\n    this.state = {\n      username: null,\n      password: null\n    };\n  }\n  /**\n   * HTTP POST request is sent to the backend.\n   * If the request is successful, a new user is returned to the front-end and its token is stored in the localStorage.\n   */\n  login() {\n    fetch(`${getDomain()}/users`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(response => response.json())\n      .then(returnedUser => {\n        const user = new User(returnedUser);\n        // store the token into the local storage\n        localStorage.setItem(\"token\", user.token);\n        // user login successfully worked --> navigate to the route /game in the GameRouter\n        this.props.history.push(`/game`);\n      })\n      .catch(err => {\n        if (err.message.match(/Failed to fetch/)) {\n          alert(\"The server cannot be reached. Did you start it?\");\n        }  else if (err.message.match( /wrong password/)) {     //wrong password, do as soon as you know how to\n           alert( 'wrong password');\n           this.props.history.push( '/login' );\n        } else {\n          alert(`Something went wrong during the login: ${err.message}`);\n        }\n      });\n  }\n\n  /**\n   * Testfunction i wrote to play arround with GET\n   */\n  login_test() {\n    alert( '${getDomain()}/login' );\n    fetch(`${getDomain()}/login?d`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: 'd'\n      })\n    })\n        .then(response => response.json())\n        .then(returnedUser => {\n          alert(returnedUser.name);\n          this.props.history.push(`/game`);\n        })\n        .catch(err => {\n          if (err.message.match(/Failed to fetch/)) {\n            alert(\"The server cannot be reached. Did you start it?\");\n          } else {\n            alert(`Something went wrong during the login: ${err.message}`);\n          }\n        });\n  }\n\n\n\n  /**\n   * function that leads to the registration-page, I made myself *\n   */\n\n   registration() {\n     this.props.history.push(`/registration`);\n  }\n\n  /**\n   *  Every time the user enters something in the input field, the state gets updated.\n   * @param key (the key of the state for identifying the field that needs to be updated)\n   * @param value (the value that gets assigned to the identified state key)\n   */\n  handleInputChange(key, value) {\n    // Example: if the key is username, this statement is the equivalent to the following one:\n    // this.setState({'username': value});\n    this.setState({ [key]: value });\n  }\n\n  /**\n   * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n   * Initialization that requires DOM nodes should go here.\n   * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n   * You may call setState() immediately in componentDidMount().\n   * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n   */\n  componentDidMount() {}\n\n  render() {\n    return (\n      <BaseContainer>\n        <FormContainer>\n          <Form>\n            <Label>Username</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange(\"username\", e.target.value);\n              }}\n            />\n            <Label>Password</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange(\"password\", e.target.value);\n              }}\n            />\n            <ButtonContainer>\n              <Button\n                disabled={!this.state.username || !this.state.password}\n                width=\"50%\"\n                onClick={() => {\n                  //this.login();\n                  this.login_test();\n                }}\n              >\n                Login\n              </Button>\n              <Button\n                width = \"50%\"\n                onClick = { () => {\n                  this.registration();\n              }}\n              >\n                Registration\n              </Button>\n            </ButtonContainer>\n          </Form>\n        </FormContainer>\n      </BaseContainer>\n    );\n  }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(Login);\n"]},"metadata":{},"sourceType":"module"}