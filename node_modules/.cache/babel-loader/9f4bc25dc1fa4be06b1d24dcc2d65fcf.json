{"ast":null,"code":"import _regeneratorRuntime from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/PlayerPage/PlayerPageEdit.js\";\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  font-weight: lighter;\\n  margin-left: 5px;\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 6px 0;\\n  width: 280px;\\n  padding: 10px;\\n  border-radius: 6px;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid #ffffff26;\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 0.2);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 375px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport { ErrorCode } from \"../shared/ErrorHandler/ErrorHandler\";\nimport Player from \"../../views/Player\";\n\nfunction sleep(time) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, time);\n  });\n}\n\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\nvar Container = styled.div(_templateObject6());\nvar UserName = styled.div(_templateObject7());\nvar Id = styled.div(_templateObject8());\nvar Status = styled.div(_templateObject9());\nvar Birthday = styled.div(_templateObject10());\nvar CreationDate = styled.div(_templateObject11());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar PlayerPageEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlayerPageEdit, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function PlayerPageEdit() {\n    var _this;\n\n    _classCallCheck(this, PlayerPageEdit);\n\n    var us = new User({\n      \"username\": \"Loading\",\n      \"birthday\": 0,\n      \"status\": \"Loading\"\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayerPageEdit).call(this));\n    _this.state = {\n      username: null,\n      birthday: null,\n      user: us\n    };\n    return _this;\n  }\n\n  _createClass(PlayerPageEdit, [{\n    key: \"backTomain\",\n    value: function backTomain() {\n      localStorage.removeItem(\"lookingAtUser\");\n      this.props.history.push(\"/game\");\n    }\n  }, {\n    key: \"edit\",\n    value: function edit() {\n      var _this2 = this;\n\n      if (!this.state.username && !this.state.birthday) {\n        alert(\"both changed\");\n      } else if (!this.state.username) {\n        alert(\"only username\");\n      } else {\n        alert(this.state.username);\n        alert(this.state.birthday);\n        alert(\"only birthday\");\n      }\n\n      fetch(\"\".concat(getDomain(), \"/users/\") + localStorage.getItem(\"id\"), {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          birthday: this.state.birthday\n        })\n      }).then(function (response) {\n        if (response.status !== 200) {\n          throw new Error(ErrorCode(response.status));\n        }\n\n        return response.json();\n      }).then(function (returnedUser) {\n        _this2.props.history.push(\"/PlayerPage/\" + localStorage.getItem(\"id\"));\n      }).catch(function (err) {\n        if (err.message.match(/Failed to fetch/)) {\n          alert(\"The server cannot be reached. Did you start it?\");\n        } else if (err.message.match(/unauthorized/)) {\n          //wrong password, do as soon as you know how to\n          alert('wrong username or password');\n\n          _this2.props.history.push('/login');\n        } else {\n          alert(\"Something went wrong during the login: \".concat(err.message));\n        }\n      });\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      var id = localStorage.getItem(\"atID\");\n      fetch(\"\".concat(getDomain(), \"/users/\") + id, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        if (response.status !== 200) {\n          throw new Error(ErrorCode(response.status));\n        }\n\n        return response.json();\n      }).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(returnedUser) {\n          var user;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return new Promise(function (resolve) {\n                    return setTimeout(resolve, 800);\n                  });\n\n                case 2:\n                  user = new User(returnedUser);\n\n                  _this3.setState({\n                    \"user\": user\n                  }); // store the token into the local storage\n\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (err) {\n        console.log(err);\n        alert(\"Something went wrong fetching the users: \" + err);\n      });\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var us = new User({\n        \"username\": \"hans\",\n        \"id\": -1,\n        \"status\": \"OFFLINE\"\n      });\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Edit\", React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(UserName, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"User:\", React.createElement(InputField, {\n        placeholder: this.state.user.username,\n        onChange: function onChange(e) {\n          _this4.handleInputChange(\"username\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      })), React.createElement(Birthday, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Birthday:\", React.createElement(InputField, {\n        placeholder: this.state.user.birthday,\n        onChange: function onChange(e) {\n          _this4.handleInputChange(\"birthday\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      })), React.createElement(Id, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"Id: \", this.state.user.id), React.createElement(CreationDate, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"CreationDate: \", this.state.user.creationDate, \" \"), React.createElement(Status, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"Status: \", this.state.user.status))), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Button, {\n        width: \"50%\",\n        onClick: function onClick() {\n          _this4.backTomain();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"Return to main Page\"), React.createElement(Button, {\n        disabled: !this.state.username && !this.state.birthday,\n        width: \"50%\",\n        onClick: function onClick() {\n          _this4.edit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, \"save changes\"))));\n    }\n  }]);\n\n  return PlayerPageEdit;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(PlayerPageEdit);\n/**\n <Player user ={ this.state.user} />\n <Player user ={ this.state.user} />\n <UserName>User: {this.state.user.username}</UserName>\n <Id>Id: {this.state.user.id}</Id>\n\n */","map":{"version":3,"sources":["/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/PlayerPage/PlayerPageEdit.js"],"names":["React","styled","BaseContainer","getDomain","User","withRouter","Button","ErrorCode","Player","sleep","time","Promise","resolve","setTimeout","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Container","UserName","Id","Status","Birthday","CreationDate","PlayerPageEdit","us","state","username","birthday","user","localStorage","removeItem","props","history","push","alert","fetch","getItem","method","headers","body","JSON","stringify","then","response","status","Error","json","returnedUser","catch","err","message","match","key","value","setState","id","console","log","e","handleInputChange","target","creationDate","backTomain","edit","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport {ErrorCode} from \"../shared/ErrorHandler/ErrorHandler\"\nimport Player from \"../../views/Player\";\n\nfunction sleep (time) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 375px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.2);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst Container = styled.div`\n  margin: 6px 0;\n  width: 280px;\n  padding: 10px;\n  border-radius: 6px;\n  display: flex;\n  align-items: center;\n  border: 1px solid #ffffff26;\n`;\n\nconst UserName = styled.div`\n  font-weight: lighter;\n  margin-left: 5px;\n`;\n\nconst Id = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nconst Status = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nconst Birthday = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nconst CreationDate = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\n\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass PlayerPageEdit extends React.Component {\n\n    /**\n     * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n     * The constructor for a React component is called before it is mounted (rendered).\n     * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n     * These fields are then handled in the onChange() methods in the resp. InputFields\n     */\n    constructor() { var us = new User( {\n        \"username\" : \"Loading\",\n        \"birthday\": 0,\n        \"status\": \"Loading\"\n    } );\n        super();\n        this.state = {\n            username: null,\n            birthday: null,\n            user: us\n        };\n    }\n\n    backTomain(){\n        localStorage.removeItem(\"lookingAtUser\");\n        this.props.history.push(`/game`);\n    }\n\n    edit(){\n        if( !this.state.username && !this.state.birthday){\n            alert(\"both changed\");\n        }\n        else if(!this.state.username){\n            alert(\"only username\");\n        }\n        else{\n            alert(this.state.username);\n            alert(this.state.birthday);\n            alert(\"only birthday\");\n        }\n        fetch(`${getDomain()}/users/`+localStorage.getItem(\"id\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                birthday: this.state.birthday\n            })\n        }).then(response => {\n            if( response.status !== 200 ) {\n                throw new Error( ErrorCode(response.status) );\n            }\n            return response.json() })\n            .then(returnedUser => {\n                this.props.history.push(`/PlayerPage/`+localStorage.getItem(\"id\"));\n            })\n            .catch(err => {\n                if (err.message.match(/Failed to fetch/)) {\n                    alert(\"The server cannot be reached. Did you start it?\");\n                }  else if (err.message.match( /unauthorized/)) {     //wrong password, do as soon as you know how to\n                    alert( 'wrong username or password');\n                    this.props.history.push( '/login' );\n                } else {\n                    alert(`Something went wrong during the login: ${err.message}`);\n                }\n            });\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n    handleInputChange(key, value) {\n        // Example: if the key is username, this statement is the equivalent to the following one:\n        // this.setState({'username': value});\n        this.setState({ [key]: value });\n    }\n\n\n    componentWillMount() {\n        var id = localStorage.getItem(\"atID\");\n        fetch(`${getDomain()}/users/`+id, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            if( response.status !== 200 ) {\n                throw new Error( ErrorCode(response.status) );\n            }\n            return response.json() })\n            .then(async returnedUser => {\n                await new Promise(resolve => setTimeout(resolve, 800));\n                const user = new User(returnedUser);\n                this.setState({\"user\": user});\n                // store the token into the local storage\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Something went wrong fetching the users: \" + err);\n            });\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n    render() {\n\n        var us = new User( {\n            \"username\" : \"hans\",\n            \"id\": -1,\n            \"status\": \"OFFLINE\"\n        } );\n\n        return (\n            <BaseContainer>\n                <FormContainer>\n                    <Form>\n                        Edit\n                        <Container>\n                            <UserName>\n                                User:\n                                <InputField\n                                    placeholder={this.state.user.username}\n                                    onChange={e => {\n                                        this.handleInputChange(\"username\", e.target.value);\n                                    }}\n                                />\n                            </UserName>\n                            <Birthday>Birthday:\n                                <InputField\n                                    placeholder={this.state.user.birthday}\n                                    onChange={e => {\n                                        this.handleInputChange(\"birthday\", e.target.value);\n                                    }}\n                                />\n                            </Birthday>\n                            <Id>Id: {this.state.user.id}</Id>\n                            <CreationDate>CreationDate: {this.state.user.creationDate} </CreationDate>\n                            <Status>Status: {this.state.user.status}</Status>\n\n                        </Container>\n                    </Form>\n                    <ButtonContainer>\n                        <Button\n                            width=\"50%\"\n                            onClick={() => {\n                                this.backTomain();\n                            }}\n                        >\n                            Return to main Page\n                        </Button>\n                        <Button\n                            disabled={!this.state.username && !this.state.birthday}\n                            width=\"50%\"\n                            onClick={() => {\n                                this.edit();\n                            }}\n                        >\n                            save changes\n                        </Button>\n                    </ButtonContainer>\n                </FormContainer>\n            </BaseContainer>\n        );\n\n    }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(PlayerPageEdit);\n/**\n <Player user ={ this.state.user} />\n <Player user ={ this.state.user} />\n <UserName>User: {this.state.user.username}</UserName>\n <Id>Id: {this.state.user.id}</Id>\n\n */"]},"metadata":{},"sourceType":"module"}