{"ast":null,"code":"import _regeneratorRuntime from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/PlayerPage/PlayerPage.js\";\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: 10px;\\n  margin-left: 5px;\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 6px 0;\\n  width: 860px;\\n  padding: 10px;\\n  border-radius: 6px;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid #ffffff26;\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 0.2);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 375px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height:400px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport { ErrorCode } from \"../shared/ErrorHandler/ErrorHandler\";\nimport Player from \"../../views/Player\";\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\nvar Container = styled.div(_templateObject6());\nvar UserName = styled.div(_templateObject7());\nvar Id = styled.div(_templateObject8());\nvar Status = styled.div(_templateObject9());\nvar Birthday = styled.div(_templateObject10());\nvar CreationDate = styled.div(_templateObject11());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar PlayerPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlayerPage, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function PlayerPage() {\n    var _this;\n\n    _classCallCheck(this, PlayerPage);\n\n    var us = new User({\n      \"username\": \"Loading\",\n      \"id\": 0,\n      \"status\": \"Loading\"\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayerPage).call(this));\n    _this.state = {\n      user: us\n    };\n    return _this;\n  }\n\n  _createClass(PlayerPage, [{\n    key: \"backTomain\",\n    value: function backTomain() {\n      localStorage.removeItem(\"lookingAtUser\");\n      this.props.history.push(\"/game\");\n    }\n  }, {\n    key: \"editPage\",\n    value: function editPage() {\n      this.props.history.push(\"/PlayerPageEdit\");\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      var _this2 = this;\n\n      var id = localStorage.getItem(\"atID\");\n      fetch(\"\".concat(getDomain(), \"/users/\") + id, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(ErrorCode(response.status));\n        }\n\n        return response.json();\n      }).then(function (returnedUser) {\n        var user = new User(returnedUser);\n\n        _this2.setState({\n          \"user\": user\n        }); // store the token into the local storage\n\n\n        _this2.forceUpdate();\n      }).catch(function (err) {\n        console.log(err);\n        alert(\"Something went wrong fetching the users: \" + err);\n      });\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      var id = localStorage.getItem(\"atID\");\n      fetch(\"\".concat(getDomain(), \"/users/\") + id, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(ErrorCode(response.status));\n        }\n\n        return response.json();\n      }).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(returnedUser) {\n          var user;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return new Promise(function (resolve) {\n                    return setTimeout(resolve, 800);\n                  });\n\n                case 2:\n                  user = new User(returnedUser);\n\n                  _this3.setState({\n                    \"user\": user\n                  }); // store the token into the local storage\n\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (err) {\n        console.log(err);\n        alert(\"Something went wrong fetching the users: \" + err);\n      });\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var us = new User({\n        \"username\": \"hans\",\n        \"id\": -1,\n        \"status\": \"OFFLINE\"\n      });\n      var button;\n\n      if (localStorage.getItem(\"atID\") == localStorage.getItem(\"id\")) {\n        button = React.createElement(Button, {\n          width: \"50%\",\n          onClick: function onClick() {\n            _this4.editPage();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, \"edit site\");\n      }\n\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(UserName, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"User: \", this.state.user.username), React.createElement(Birthday, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Birthday: \", this.state.user.birthday, \" \"), React.createElement(Id, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Id: \", this.state.user.id), React.createElement(CreationDate, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"CreationDate: \", this.state.user.creationDate, \" \"), React.createElement(Status, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Status: \", this.state.user.status))), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(Button, {\n        width: \"50%\",\n        onClick: function onClick() {\n          _this4.backTomain();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Return to main Page\"), button)));\n    }\n  }]);\n\n  return PlayerPage;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(PlayerPage);\n/**\n <Player user ={ this.state.user} />\n <Player user ={ this.state.user} />\n <UserName>User: {this.state.user.username}</UserName>\n <Id>Id: {this.state.user.id}</Id>\n\n */","map":{"version":3,"sources":["/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/PlayerPage/PlayerPage.js"],"names":["React","styled","BaseContainer","getDomain","User","withRouter","Button","ErrorCode","Player","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Container","UserName","Id","Status","Birthday","CreationDate","PlayerPage","us","state","user","localStorage","removeItem","props","history","push","id","getItem","fetch","method","headers","then","response","status","Error","json","returnedUser","setState","forceUpdate","catch","err","console","log","alert","key","value","Promise","resolve","setTimeout","button","editPage","username","birthday","creationDate","backTomain","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport {ErrorCode} from \"../shared/ErrorHandler/ErrorHandler\"\nimport Player from \"../../views/Player\";\n\n\n\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height:400px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 375px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.2);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst Container = styled.div`\n  margin: 6px 0;\n  width: 860px;\n  padding: 10px;\n  border-radius: 6px;\n  display: flex;\n  align-items: center;\n  border: 1px solid #ffffff26;\n`;\n\nconst UserName = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  margin-left: 5px;\n`;\n\nconst Id = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nconst Status = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nconst Birthday = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nconst CreationDate = styled.div`\n  margin-left: auto;\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\n\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass PlayerPage extends React.Component {\n\n    /**\n     * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n     * The constructor for a React component is called before it is mounted (rendered).\n     * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n     * These fields are then handled in the onChange() methods in the resp. InputFields\n     */\n    constructor() { var us = new User( {\n        \"username\" : \"Loading\",\n        \"id\": 0,\n        \"status\": \"Loading\"\n    } );\n        super();\n        this.state = {\n            user: us\n        };\n    }\n\n    backTomain(){\n        localStorage.removeItem(\"lookingAtUser\");\n        this.props.history.push(`/game`);\n    }\n\n    editPage(){\n        this.props.history.push(`/PlayerPageEdit`);\n    }\n\n    getUser(){\n        var id = localStorage.getItem(\"atID\");\n        fetch(`${getDomain()}/users/`+id, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            if( response.status < 200 || response.status >= 300 ) {\n                throw new Error( ErrorCode(response.status) );\n            }\n            return response.json() })\n            .then(returnedUser => {\n                const user = new User(returnedUser);\n                this.setState({\"user\": user});\n                // store the token into the local storage\n                this.forceUpdate();\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Something went wrong fetching the users: \" + err);\n            });\n\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n    handleInputChange(key, value) {\n        // Example: if the key is username, this statement is the equivalent to the following one:\n        // this.setState({'username': value});\n        this.setState({ [key]: value });\n    }\n\n\n    componentWillMount() {\n        var id = localStorage.getItem(\"atID\");\n        fetch(`${getDomain()}/users/`+id, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            if( response.status < 200 || response.status >= 300 ) {\n                throw new Error( ErrorCode(response.status) );\n            }\n            return response.json() })\n            .then(async returnedUser => {\n                await new Promise(resolve => setTimeout(resolve, 800));\n                const user = new User(returnedUser);\n                this.setState({\"user\": user});\n                // store the token into the local storage\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Something went wrong fetching the users: \" + err);\n            });\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n    render() {\n\n        var us = new User( {\n            \"username\" : \"hans\",\n            \"id\": -1,\n            \"status\": \"OFFLINE\"\n        } );\n\n        let button;\n        if(localStorage.getItem(\"atID\") == localStorage.getItem(\"id\")){\n            button =\n                <Button\n                    width=\"50%\"\n                    onClick={() => {\n                        this.editPage();\n                    }}>\n                edit site\n            </Button>;\n\n        }\n\n        return (\n            <BaseContainer>\n                <FormContainer>\n                    <Form>\n                        <Container>\n                            <UserName>User: {this.state.user.username}</UserName>\n                            <Birthday>Birthday: {this.state.user.birthday} </Birthday>\n                            <Id>Id: {this.state.user.id}</Id>\n                            <CreationDate>CreationDate: {this.state.user.creationDate} </CreationDate>\n                            <Status>Status: {this.state.user.status}</Status>\n                        </Container>\n                    </Form>\n                    <ButtonContainer>\n                        <Button\n                            width=\"50%\"\n                            onClick={() => {\n                                this.backTomain();\n                            }}\n                        >\n                            Return to main Page\n                        </Button>\n                        {button}\n                    </ButtonContainer>\n                </FormContainer>\n            </BaseContainer>\n        );\n\n    }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(PlayerPage);\n/**\n <Player user ={ this.state.user} />\n <Player user ={ this.state.user} />\n <UserName>User: {this.state.user.username}</UserName>\n <Id>Id: {this.state.user.id}</Id>\n\n */"]},"metadata":{},"sourceType":"module"}