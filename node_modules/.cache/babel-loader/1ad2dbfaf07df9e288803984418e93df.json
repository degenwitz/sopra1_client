{"ast":null,"code":"import _defineProperty from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/PlayerPage/PlayerPage.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 0.2);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 375px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport { ErrorCode } from \"../shared/ErrorHandler/ErrorHandler\";\nimport Player from \"../../views/Player\";\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar PlayerPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlayerPage, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function PlayerPage() {\n    var _this;\n\n    _classCallCheck(this, PlayerPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayerPage).call(this));\n    _this.state = {\n      user: null\n    };\n    return _this;\n  }\n\n  _createClass(PlayerPage, [{\n    key: \"backTomain\",\n    value: function backTomain() {\n      localStorage.removeItem(\"lookingAtUser\");\n      this.props.history.push(\"/game\");\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      var _this2 = this;\n\n      var id = localStorage.getItem(\"atID\");\n      fetch(\"\".concat(getDomain(), \"/users/\") + id, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        if (response.status !== 200) {\n          throw new Error(ErrorCode(response.status));\n        }\n\n        return response.json();\n      }).then(function (returnedUser) {\n        var user = new User(returnedUser);\n\n        _this2.setState(\"user\", user); // store the token into the local storage\n\n      }).catch(function (err) {\n        console.log(err);\n        alert(\"Something went wrong fetching the users: \" + err);\n      });\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      this.getUser();\n      alert(this.state.user.username);\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Player, {\n        user: this.state.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Button, {\n        width: \"50%\",\n        onClick: function onClick() {\n          _this3.backTomain();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Return to main Page\")))));\n    }\n  }]);\n\n  return PlayerPage;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(PlayerPage);","map":{"version":3,"sources":["/home/dimi/Documents/Informatik Studium/SoPra/sopra1_client/src/components/PlayerPage/PlayerPage.js"],"names":["React","styled","BaseContainer","getDomain","User","withRouter","Button","ErrorCode","Player","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","PlayerPage","state","user","localStorage","removeItem","props","history","push","id","getItem","fetch","method","headers","then","response","status","Error","json","returnedUser","setState","catch","err","console","log","alert","key","value","getUser","username","backTomain","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport {ErrorCode} from \"../shared/ErrorHandler/ErrorHandler\"\nimport Player from \"../../views/Player\";\n\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 375px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.2);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass PlayerPage extends React.Component {\n    /**\n     * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n     * The constructor for a React component is called before it is mounted (rendered).\n     * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n     * These fields are then handled in the onChange() methods in the resp. InputFields\n     */\n    constructor() {\n        super();\n        this.state = {\n            user: null\n        };\n    }\n\n    backTomain(){\n        localStorage.removeItem(\"lookingAtUser\");\n        this.props.history.push(`/game`);\n    }\n\n    getUser(){\n        var id = localStorage.getItem(\"atID\");\n        fetch(`${getDomain()}/users/`+id, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            if( response.status !== 200 ) {\n                throw new Error( ErrorCode(response.status) );\n            }\n            return response.json() })\n            .then(returnedUser => {\n                const user = new User(returnedUser);\n                this.setState(\"user\", user);\n                // store the token into the local storage\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Something went wrong fetching the users: \" + err);\n            });\n\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n    handleInputChange(key, value) {\n        // Example: if the key is username, this statement is the equivalent to the following one:\n        // this.setState({'username': value});\n        this.setState({ [key]: value });\n    }\n\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n    componentDidMount() {}\n\n    render() {\n        this.getUser();\n        alert(this.state.user.username);\n        return (\n            <BaseContainer>\n                <FormContainer>\n                    <Form>\n                        <Player user ={ this.state.user} />\n                        <ButtonContainer>\n                            <Button\n                                width = \"50%\"\n                                onClick = { () => {\n                                    this.backTomain();\n                                }}\n                            >\n                                Return to main Page\n                            </Button>\n                        </ButtonContainer>\n                    </Form>\n                </FormContainer>\n            </BaseContainer>\n        );\n    }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(PlayerPage);\n"]},"metadata":{},"sourceType":"module"}